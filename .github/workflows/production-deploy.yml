name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for testing
        run: docker build -t yelp-camp:test .

      - name: Start app container for testing
        run: |
          docker run -d \
            --name app-container \
            -p 3000:3000 \
            -e MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
            -e PROD_DB="${{ secrets.PROD_DB }}" \
            -e NODE_ENV="production" \
            yelp-camp:test

      - name: Wait for application to be ready
        run: |
          echo "Waiting for app to start..."
          timeout 60 bash -c '
            until curl -f http://localhost:3000 > /dev/null 2>&1; do 
              echo "App not ready, waiting..."
              sleep 3
            done
          '
          echo "App is ready!"

      - name: Run tests
        run: |
          docker exec app-container npm run tests

      - name: Stop and remove test containers
        if: always()
        run: |
          docker stop app-container || true
          docker rm app-container || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract version
        id: version
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/yelp-camp
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ steps.version.outputs.version }}
            type=sha,prefix=prod-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger Render deployment
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}/deploys

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}-${{ steps.version.outputs.short_sha }}
          release_name: Production Release v${{ steps.version.outputs.version }}
          body: |
            üöÄ **Production Deployment**
            
            **Version:** v${{ steps.version.outputs.version }}
            **Commit:** ${{ github.sha }}
            **Docker Image:** ${{ secrets.DOCKER_HUB_USERNAME }}/yelp-camp:v${{ steps.version.outputs.version }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}
            
            **Deployed to:** [Production Environment](https://yelp-camp-production.onrender.com)
          draft: false
          prerelease: false

      - name: Update commit status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment successful"
          else
            echo "‚ùå Production deployment failed"
            exit 1
          fi